class Node
   { 
   public :
      int data ;
      Node* next; 
      // constructor 
      Node(int data)
      {
       this-> data = data;
       this-> next = NULL;
       }
      // Destructor
      ~Node()
      { 
       
         if(this-> next != NULL)
           { this-> next = NULL ;
             delete next ;
             this-> next = NULL;
           }
           cout<< "\n Deleted Data ="<< this-> data<<endl; 
       }
    };
      
     void print(Node* &head)
     { Node* temp= head ; 
       while( temp != NULL)
       { 
        cout<< temp-> data<< "  " ; 
        temp= temp-> next ; // travel 
        }
     } 
    
    void deletenode(Node* &head, int position)
    { // deleting starting/ 1st node
      if( position == 1)
      { Node* temp = head ;// store head 
        head = head-> next ;
        // release before delete 
        temp->next= NULL;
        delete temp;
        }
      else // deleting middle & last position
      {  
        Node* previous = NULL;
        Node* current = head ;
        int count = 1;
        
        while( count < position )
        { previous = current;
          current = current-> next ;
          count++;
          }
         previous-> next = current-> next ; 
        // release before delete 
         current-> next = NULL; 
         delete current ; 
        }
      }
      
      
     int main() {
      Node* head = NULL;
      Node* node1 = new Node(10);
      head = node1; 
      Node* tail = head ;
      
       Node* node2 = new Node(20);
       node1-> next = node2;
       
       Node* node3 =new Node(30);
       node2-> next =  node3;
       
       Node* node4 =new Node(40);
       node3-> next =  node4;
      
      
      deletenode(head,3);
      print(head);
      
      return 0; 
      }  
          
